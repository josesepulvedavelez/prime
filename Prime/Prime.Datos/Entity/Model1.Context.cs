//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Prime.Datos.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PrimeEntities : DbContext
    {
        public PrimeEntities()
            : base("name=PrimeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Curso> Curso { get; set; }
        public virtual DbSet<Direccion> Direccion { get; set; }
        public virtual DbSet<Estudiante> Estudiante { get; set; }
        public virtual DbSet<Horario> Horario { get; set; }
    
        public virtual int DireccionDelete(Nullable<int> direccionId)
        {
            var direccionIdParameter = direccionId.HasValue ?
                new ObjectParameter("DireccionId", direccionId) :
                new ObjectParameter("DireccionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DireccionDelete", direccionIdParameter);
        }
    
        public virtual int DireccionInsert(string pais, string estado, string ciudad, string barrio, string calle, string casaApto, Nullable<int> direccionId, Nullable<int> estudianteId)
        {
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var barrioParameter = barrio != null ?
                new ObjectParameter("Barrio", barrio) :
                new ObjectParameter("Barrio", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var casaAptoParameter = casaApto != null ?
                new ObjectParameter("CasaApto", casaApto) :
                new ObjectParameter("CasaApto", typeof(string));
    
            var direccionIdParameter = direccionId.HasValue ?
                new ObjectParameter("DireccionId", direccionId) :
                new ObjectParameter("DireccionId", typeof(int));
    
            var estudianteIdParameter = estudianteId.HasValue ?
                new ObjectParameter("EstudianteId", estudianteId) :
                new ObjectParameter("EstudianteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DireccionInsert", paisParameter, estadoParameter, ciudadParameter, barrioParameter, calleParameter, casaAptoParameter, direccionIdParameter, estudianteIdParameter);
        }
    
        public virtual ObjectResult<DireccionSelect_Result> DireccionSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DireccionSelect_Result>("DireccionSelect");
        }
    
        public virtual ObjectResult<DireccionSelectByEstudianteId_Result> DireccionSelectByEstudianteId(Nullable<int> estudianteId)
        {
            var estudianteIdParameter = estudianteId.HasValue ?
                new ObjectParameter("EstudianteId", estudianteId) :
                new ObjectParameter("EstudianteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DireccionSelectByEstudianteId_Result>("DireccionSelectByEstudianteId", estudianteIdParameter);
        }
    
        public virtual int DireccionUpdate(string pais, string estado, string ciudad, string barrio, string calle, string casaApto, Nullable<int> direccionId, Nullable<int> estudianteId)
        {
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var barrioParameter = barrio != null ?
                new ObjectParameter("Barrio", barrio) :
                new ObjectParameter("Barrio", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var casaAptoParameter = casaApto != null ?
                new ObjectParameter("CasaApto", casaApto) :
                new ObjectParameter("CasaApto", typeof(string));
    
            var direccionIdParameter = direccionId.HasValue ?
                new ObjectParameter("DireccionId", direccionId) :
                new ObjectParameter("DireccionId", typeof(int));
    
            var estudianteIdParameter = estudianteId.HasValue ?
                new ObjectParameter("EstudianteId", estudianteId) :
                new ObjectParameter("EstudianteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DireccionUpdate", paisParameter, estadoParameter, ciudadParameter, barrioParameter, calleParameter, casaAptoParameter, direccionIdParameter, estudianteIdParameter);
        }
    }
}
